<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="label10.Text" xml:space="preserve">
    <value>When you press the Commodity Query button, you will be reffered to a new window and will be asked to fill in the Commodity ID 

you want to get info about. After pressing the Apply button you will get information about the requested Commodity:

- "ask" - The commodity lowest ask price for selling.

- "bid" - The commodity highest bid price for buying.

If you wish to buy a commodity and you enter a bid price higher than the commodity bid price, a transcation would occur.

If you wish to sell a commodity and you enter an ask price lower than the commodity ask price, a transcation would occur.</value>
  </data>
  <data name="label8.Text" xml:space="preserve">
    <value>When you press the Buy / Sell Query button, you will be reffered to a new window and will be asked to fill in your request ID.

When you press apply you will get info of the given request to your screen:

-  The price you've entered

- The amount remaining (if it's less that what you've set it means the server already bought/sold some commodities)

- The user who made the request

Similar to Canceling a request, if you recieved an error while pressing the Apply button, it could be one of two cases:

1. You've entered a wrong request ID

2. Your request has been already fullfiled. fullfilled request are being deleted from the server automatically.</value>
  </data>
  <data name="label6.Text" xml:space="preserve">
    <value>When you press the Cancel Request Button, you will be reffered to a new window and will be asked to fill in your request ID.
After that you will get a Message - either your request was successful or failed. 

If the request failed it could be one of two reasons:

1. You have entered a wrong Request Id.

2. Your request has been already fullfilled. Fullfiled requests are deleted from the server automatically.</value>
  </data>
  <data name="label3.Text" xml:space="preserve">
    <value>When you press the Buy/Sell Commodities button, you will be reffered to a new window with the following
 parameters:

Commodity ID , Amount ,Ask/Bid Price.

The Commodity ID should be an integer number between 0 to 9, and it is used to choose what type of commodity you would
 like to buy or sell.

The Amount should be a positive integer number, which defines how many commodities you would like to buy or sell in this
 request.

Ask Price - the lowest price you are willing to sell in. when making a sell request, the server will not sell the commodities unless
 the commodity price is higher than or equal to your ask price.

Bid Price - The highest price you are willing to buy in. When making a buy request, the server will not buy the commodities
 unless the commodity price is lower or equal to your bid price.

After you press the apply button, you will get a Request ID, and the server will check the commodity price until your set
 requirements are met. you can keep track on your request using the SellBuyQuery with the given Request ID.

Other information: If you do not have enough funds to buy a commodity, you will not be able to complete a buy request. 
you can check your remaining funds in the User Query (under General Queries tab). The Same applies for selling commodities 
when you do not posses enough of them.
</value>
  </data>
  <data name="label2.Text" xml:space="preserve">
    <value>In this app you will be able to make one of the following requests:

* Sell/Buy Commodities

* Cancel a Buy/Sell request

*A various of Query Requests:

User Query, Sell/Buy Request Query, All Market Query, Commodity Query and User Requests Query.

Each request is explained in the tabs above. Just choose one tab, get information you need
and start Trading! 

May the odds be ever in your favor.</value>
  </data>
  <data name="label12.Text" xml:space="preserve">
    <value>Besides the Buy/Sell Query and Commodity Query there are 3 other Queries you are able to request:

1. All Market Query - After pressing this button you will get info about all the commodities in the market - their ask 
and bid prices, and their id's.

2. User Query - After pressing this button you will get info about your actions: 

- A list of the commodities you posses.

- A list of your pending requests id's

- Your remaining funds.

3. User Requests Query - After pressing this button you will get info about all your pending requests: The price set by you, the

 remaining amount to sell/buy , the type of the request (buy/sell) , the commodity id and the request id.

</value>
  </data>
  <metadata name="$this.Locked" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
</root>